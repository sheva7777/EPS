RR算法：
用于个PORT间的轮询调度。RR的实现最简单，而在大多数情况下，各个端口带宽配置是相同的，这时RR是能够满足调度要求的。

SP调度算法：
严格优先级调度。该算法按照队列优先级的高低惊醒调度，高优先级先调度，低优先级后调度。高优先级队列非空，就先调度优先级高的队列出队，只有在优先级高的队列调度空后，才调度低优先级队列。
SP的优点：算法简单，电路实现简单。同时它可以对优先级高的业务提供优先服务，保证关键的数据流得到优先对待。
SP的缺点：优先级低的数据流经常不能分配到足够多的带宽，最坏的结果可能导致优先级较低的数据永远发布出去。

WRR算法（weighted round-robin）：加权轮询算法
WRR算法资源（假设有N个待调度队列）
一个可以轮询N个队列号的计数器Rr_counter,
每个队列一个权重配置值Weight_config(N)
每个队列一个记录权重使用情况的计数器Weight_counter
WRR算法描述：
调度之前，如果全部非空队列的weight_counter都为0，则用对应的非空队列权重值weight_config更新对应的weight_counter。
已计数器Rr_counter表示的队列号n开始依次轮询，直到第一个非空的weight_counter非0队列m，轮询停止，那么m就是当前调度出的队列号。当调度完成后，把对应的weight_counter（m）减一。然后Rr_counter加1指向下一次轮询的队列。
